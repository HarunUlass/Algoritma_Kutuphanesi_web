import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import '../styles/AlgorithmListScreen.css';

// Veri tipleri
interface Algorithm {
  id: string;
  title: string;
  description: string;
  complexity: string;
  difficulty: string;
}

interface SubCategories {
  [key: string]: Algorithm[];
}

interface AllCategories {
  [key: string]: SubCategories;
}

// Mock veri
const dataStructuresSubCategories: SubCategories = {
  'Diziler': [
    {
      id: '1',
      title: 'Bubble Sort',
      complexity: 'O(n¬≤)',
      difficulty: 'Kolay',
      description: 'Yan yana bulunan elemanlarƒ± kar≈üƒ±la≈ütƒ±rarak sƒ±ralama yapan basit bir algoritmadƒ±r.'
    },
    {
      id: '2',
      title: 'Binary Search',
      complexity: 'O(log n)',
      difficulty: 'Kolay',
      description: 'Sƒ±ralƒ± bir dizide bir elemanƒ±n verimli ≈üekilde aranmasƒ±nƒ± saƒülayan algoritmadƒ±r.'
    },
    {
      id: '3',
      title: 'Merge Sort',
      complexity: 'O(n log n)',
      difficulty: 'Orta',
      description: 'B√∂l ve y√∂net stratejisini kullanarak veriyi sƒ±ralayan etkili bir algoritmadƒ±r.'
    },
    {
      id: '4',
      title: 'Quick Sort',
      complexity: 'O(n log n)',
      difficulty: 'Orta',
      description: 'B√∂l ve y√∂net yakla≈üƒ±mƒ±nƒ± kullanan hƒ±zlƒ± ve verimli bir sƒ±ralama algoritmasƒ±dƒ±r.'
    }
  ],
  'Baƒülƒ± Listeler': [
    {
      id: '5',
      title: 'Tek Y√∂nl√º Baƒülƒ± Liste',
      complexity: 'O(n)',
      difficulty: 'Kolay',
      description: 'Her d√ºƒü√ºm√ºn bir sonraki d√ºƒü√ºme i≈üaret ettiƒüi bir veri yapƒ±sƒ±dƒ±r.'
    },
    {
      id: '6',
      title: '√áift Y√∂nl√º Baƒülƒ± Liste',
      complexity: 'O(n)',
      difficulty: 'Orta',
      description: 'Her d√ºƒü√ºm√ºn bir √∂nceki ve bir sonraki d√ºƒü√ºme i≈üaret ettiƒüi bir veri yapƒ±sƒ±dƒ±r.'
    }
  ],
  'Aƒüa√ßlar': [
    {
      id: '7',
      title: 'ƒ∞kili Arama Aƒüacƒ±',
      complexity: 'O(log n)',
      difficulty: 'Orta',
      description: 'Her d√ºƒü√ºm√ºn sol alt aƒüacƒ±ndaki deƒüerlerin kendisinden k√º√ß√ºk, saƒü alt aƒüacƒ±ndaki deƒüerlerin kendisinden b√ºy√ºk olduƒüu veri yapƒ±sƒ±dƒ±r.'
    },
    {
      id: '8',
      title: 'AVL Aƒüacƒ±',
      complexity: 'O(log n)',
      difficulty: 'Zor',
      description: 'Kendi kendini dengeleyen bir ikili arama aƒüacƒ± t√ºr√ºd√ºr.'
    }
  ]
};

const deepLearningSubCategories: SubCategories = {
  'Sinir Aƒülarƒ±': [
    {
      id: '9',
      title: 'Geri Yayƒ±lƒ±m Algoritmasƒ±',
      complexity: 'O(n¬≤)',
      difficulty: 'Zor',
      description: 'Yapay sinir aƒülarƒ±nƒ±n eƒüitiminde kullanƒ±lan gradyan tabanlƒ± bir optimizasyon algoritmasƒ±dƒ±r.'
    }
  ],
  'CNN': [
    {
      id: '10',
      title: 'Evri≈üimli Sinir Aƒülarƒ±',
      complexity: 'O(n‚Å¥)',
      difficulty: 'Zor',
      description: 'G√∂r√ºnt√º tanƒ±ma ve i≈üleme i√ßin tasarlanmƒ±≈ü derin √∂ƒürenme mimarisidir.'
    }
  ],
  'RNN': [
    {
      id: '11',
      title: 'Tekrarlayan Sinir Aƒülarƒ±',
      complexity: 'O(n¬≤)',
      difficulty: 'Zor',
      description: 'Zaman serisi verileri ve sƒ±ralƒ± verileri i≈ülemek i√ßin tasarlanmƒ±≈ü bir sinir aƒüƒ± t√ºr√ºd√ºr.'
    }
  ]
};

const machineLearningSubCategories: SubCategories = {
  'Denetimli √ñƒürenme': [
    {
      id: '12',
      title: 'Karar Aƒüa√ßlarƒ±',
      complexity: 'O(n log n)',
      difficulty: 'Orta',
      description: 'Verilerin √∂zelliklerine g√∂re sƒ±nƒ±flandƒ±rma yapan aƒüa√ß yapƒ±sƒ±nda bir modeldir.'
    },
    {
      id: '13',
      title: 'Destek Vekt√∂r Makineleri',
      complexity: 'O(n¬≤)',
      difficulty: 'Zor',
      description: 'Veri noktalarƒ±nƒ± ayƒ±ran optimum hiper d√ºzlemi bulmaya √ßalƒ±≈üan bir sƒ±nƒ±flandƒ±rma algoritmasƒ±dƒ±r.'
    }
  ],
  'Denetimsiz √ñƒürenme': [
    {
      id: '14',
      title: 'K-Means K√ºmeleme',
      complexity: 'O(k¬∑n¬∑t)',
      difficulty: 'Orta',
      description: 'Verileri k sayƒ±da k√ºmeye ayƒ±ran bir k√ºmeleme algoritmasƒ±dƒ±r.'
    },
    {
      id: '15',
      title: 'Hiyerar≈üik K√ºmeleme',
      complexity: 'O(n¬≥)',
      difficulty: 'Orta',
      description: 'Veri noktalarƒ±nƒ± hiyerar≈üik bir aƒüa√ß yapƒ±sƒ±nda k√ºmeleyerek grupla≈ütƒ±ran bir algoritmadƒ±r.'
    }
  ],
  'Peki≈ütirmeli √ñƒürenme': [
    {
      id: '16',
      title: 'Q-√ñƒürenme',
      complexity: 'O(n¬≤)',
      difficulty: 'Zor',
      description: 'Ajan, √ßevre ve √∂d√ºl sistemi √ºzerinden en iyi eylem stratejisini √∂ƒürenen bir algoritmadƒ±r.'
    }
  ]
};

// T√ºm kategoriler objesini olu≈ütur
const allCategories: AllCategories = {
  '1': dataStructuresSubCategories,
  '2': deepLearningSubCategories,
  '3': machineLearningSubCategories,
  // Diƒüer kategoriler eklenebilir
};

const difficultyColors: {[key: string]: string} = {
  'Kolay': '#27ae60',
  'Orta': '#f39c12',
  'Zor': '#e74c3c',
};

// URL parametrelerini alabilmek i√ßin basit bir mock kategori objesi
const mockCategories = {
  '1': {
    id: '1',
    title: 'Veri Yapƒ±larƒ±',
    icon: 'üèóÔ∏è',
    description: 'Diziler, Baƒülƒ± Listeler, Aƒüa√ßlar, Hash Tablolarƒ± ve daha fazlasƒ±',
    color: '#3498db',
    subCategories: ['Diziler', 'Baƒülƒ± Listeler', 'Aƒüa√ßlar']
  },
  '2': {
    id: '2',
    title: 'Derin √ñƒürenme',
    icon: 'üß†',
    description: 'Yapay Sinir Aƒülarƒ±, CNN, RNN ve derin √∂ƒürenme mimarileri',
    color: '#9b59b6',
    subCategories: ['Sinir Aƒülarƒ±', 'CNN', 'RNN']
  },
  '3': {
    id: '3',
    title: 'Makine √ñƒürenmesi',
    icon: 'ü§ñ',
    description: 'Regresyon, Sƒ±nƒ±flandƒ±rma, K√ºmeleme ve diƒüer ML algoritmalarƒ±',
    color: '#e74c3c',
    subCategories: ['Denetimli √ñƒürenme', 'Denetimsiz √ñƒürenme', 'Peki≈ütirmeli √ñƒürenme']
  },
};

const AlgorithmListScreen: React.FC = () => {
  // URL'den kategori id parametresini almak i√ßin useParams kullanƒ±yoruz
  const { categoryId } = useParams<{ categoryId: string }>();
  // Demo amacƒ±yla mock kategoriyi kullanƒ±yoruz (ger√ßek uygulamada props veya global state olabilir)
  const category = mockCategories[categoryId as keyof typeof mockCategories];
  
  // Alt kategorileri alƒ±yoruz
  const subCategories = allCategories[categoryId || '1'] || {};
  const subCategoryNames = Object.keys(subCategories);
  
  const [selectedSubCategory, setSelectedSubCategory] = useState(subCategoryNames[0] || '');
  const algorithms = subCategories[selectedSubCategory] || [];
  
  // Sayfa y√ºklendiƒüinde sayfanƒ±n en √ºst√ºne scroll yap
  useEffect(() => {
    window.scrollTo(0, 0);
  }, [categoryId, selectedSubCategory]);
  
  return (
    <div className="algorithm-list-container">
      <div className="algorithm-list-content">
        <div className="algorithm-list-header">
          <Link to="/" className="back-button">
            ‚Üê
          </Link>
          <h1 className="header-title" data-icon={category?.icon || ''}>
            {category?.title || 'Algoritma Listesi'}
          </h1>
          <div className="empty-space"></div>
        </div>

        {/* Alt Kategori Se√ßici */}
        <div className="sub-category-container">
          <div className="sub-category-scroll">
            {subCategoryNames.map((name) => (
              <button
                key={name}
                className={`sub-category-button ${selectedSubCategory === name ? 'active' : ''}`}
                onClick={() => setSelectedSubCategory(name)}
              >
                {name}
              </button>
            ))}
          </div>
        </div>

        {/* Algoritma Listesi */}
        <div className="algorithms-container">
          {algorithms.length > 0 ? (
            algorithms.map((item) => (
              <Link 
                to={`/algorithm/${item.id}`} 
                key={item.id}
                style={{ textDecoration: 'none' }}
              >
                <div className="algorithm-item">
                  <div className="algorithm-header">
                    <h3 className="algorithm-title">{item.title}</h3>
                    <div
                      className="difficulty-badge"
                      style={{ backgroundColor: difficultyColors[item.difficulty] }}
                    >
                      <span className="difficulty-text">{item.difficulty}</span>
                    </div>
                  </div>
                  <p className="algorithm-description">{item.description}</p>
                  <div className="algorithm-footer">
                    <span className="complexity-label">Karma≈üƒ±klƒ±k:</span>
                    <span className="complexity-value">{item.complexity}</span>
                  </div>
                </div>
              </Link>
            ))
          ) : (
            <div className="no-results">
              Bu kategoride algoritma bulunamadƒ±.
            </div>
          )}
        </div>
        
        {/* Sayfa sonu bo≈üluƒüu */}
        <div className="page-end-spacer"></div>
      </div>
    </div>
  );
};

export default AlgorithmListScreen; 